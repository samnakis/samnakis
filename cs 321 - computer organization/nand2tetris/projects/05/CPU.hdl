// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	//decode and Mux1
	Not(in=instruction[15], out=notinstruction);
	Mux16(a=ALUoutput, b=instruction, sel=notinstruction, out=w1);
	
	//Aregister
	Or(a=notinstruction, b=instruction[5], out=a1);
	ARegister(in=w1, load=a1,out=aout, out[0..14]=addressM);
	
	//Mux2
	Mux16(a=aout, b=inM, sel=instruction[12], out=am);
	
	//ALU
	ALU(x=d ,y=am, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM, zr=zr, ng=ng);
	
	//Dregister
	And(a=instruction[15], b=instruction[4], out=d1);
	DRegister(in=ALUoutput, load=d1, out=d);
	
	//ZR
	And(a=instruction[1], b=instruction[15], out=zr1);
	And(a=zr1, b=zr, out=jmpzr);
	
	//NG
	And(a=instruction[2], b=instruction[15], out=ng1);
	And(a=ng1, b=ng, out=jmpng);
	
	Not(in=zr, out=notzr);
	Not(in=ng, out=notng);
	And(a=instruction[0], b=instruction[15], out=cgreater0);
	And(a=notzr, b=notng, out=posnum);
	And(a=cgreater0, b=posnum, out=jmppos);
	
	//jump
	Or(a=jmpzr, b=jmpng, out=jmpzrng);
	Or(a=jmpzrng, b=jmppos, out=jump);
	
	//writeM
	And(a=instruction[15],b=instruction[3], out=writeM);
	
	//pc
	Not(in=jump, out=notjump);
	PC(in=aout, load=jump, inc=notjump, reset=reset, out[0..14]=pc);
	
	
	
	
}